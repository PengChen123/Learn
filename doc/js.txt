//可以通过在引号前面使用 反斜杠 (\) 来转义引号。
//单引号和双引号的功能在JavaScript中是相同的
/*
	Code	Output
	\'		单引号
	\"		双引号
	\\		反斜杠符
	\n		换行符
	\r		回车符
	\t		制表符
	\b		退格符
	\f		换页符
*/
数组（Array ）
1.concat() 方法用于连接两个或多个数组。
	该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本
2.join(separator) 方法用于把数组中的所有元素放入一个字符串
	元素是通过指定的分隔符进行分隔的。
	separator可选。指定要使用的分隔符。如果省略该参数，则使用逗号作为分隔符
3.pop()用于删除并返回数组的最后一个元素
4.push()可向数组的末尾添加一个或多个元素，并返回新的长度
5.shift()把数组的第一个元素从其中删除，并返回第一个元素的值
	如果数组是空的，不进行任何操作，返回 undefined 值。
	该方法不创建新数组，而是直接修改原有的 arrayObject
6.unshift()
7.slice(start,end)
	返回一个新的数组，包含从 start 到 end (不包括该元素)
	start:如果是负数，从数组尾部开始算位置 ex:-1是最后一个，-2是倒数第二
	end:可选  未选择返回从start到结尾所有。负数从数组尾部开始算位置
8.sort() 
	在原数组上进行排序
	如果调用该方法时没有使用参数，将按字母顺序对数组中的元素进行排序，说得更精确点，是按照字符编码的顺序进行排序。
	要实现这一点，首先应把数组的元素都转换成字符串（如有必要），以便进行比较。
	如果想按照其他标准进行排序，就需要提供比较函数，该函数要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字。
	比较函数应该具有两个参数 a 和 b，其返回值如下：

	若 a 小于 b，在排序后的数组中 a 应该出现在 b 之前，则返回一个小于 0 的值。
	若 a 等于 b，则返回 0。
	若 a 大于 b，则返回一个大于 0 的值。
9.splice(index,howmany,item1,.....,itemX)
	直接对数组进行修改
	index	添加/删除的起始位置
	howmany	数量
	item 	添加的新项目 

//你可以通过在字符串变量或字符串后面写上 .length 来获得变量中string （字符串）值的长度
//数组内类型可以不一致var myArray = ["sb",88];
/*
将数据追加到一个数组末尾的最简单的方法是通过 push() 函数。
.push() 允许有一个或多个参数，并把它“push”到数组的末尾

举个例子, 对于这段代码
var arr = [1,2,3];.push
arr.push(4);
// 现在arr的值为 [1,2,3,4]



.pop() 函数用来“抛出”一个数组末尾的值。我们可以把这个“抛出”的值赋给一个变量存储起来。
数组中任何类型的数据条目（数值，字符串，甚至是数组）可以被“抛出来” 。

举个例子, 对于这段代码
var oneDown = [1, 4, 6].pop();
现在 oneDown 的值为 6 ，数组变成了 [1, 4]

.shift() 移除数组头部元素
.unshift() 移入元素到数组的头部位置
*/
/*   
函数外定义的变量具有 全局 作用域
没有使用var关键字定义的变量，会被自动创建在全局作用域中，变成全局变量
局部 变量将会优先于 全局 变量


为了让两个不同的 数据类型（例如 数字 和 字符串）的值可以作比较，它必须把一种类型转换为另一种类型。
然而一旦这样做，它可以像下面这样来比较：
	 1 ==1// true
	 1 ==2// false
	 1 == '1' // true
	"3"==3// true


全等（===）是相对于相等操作符（==）的一种操作符。
与相等操作符不同的是全等比较严格，它会同时比较元素的值和 数据类型
例如
	3 === 3 // true
	3 === '3' // false


不全等运算符（!==）与全等运算符是相反的。这意味着“不全等”并返回 false 的地方，用全等运算会返回 true，反之亦然。全等运算符不会转换值的数据类型。
例如
	3 !== 3 // false
	3 !== '3' // true
	4 !== 3 // true
*/
/*
> >= <= <  运算比较会装换数据类型
例如
	4 <= 5// true
	'7' <= 7// true
	5 <= 5// true
	3 <= 2// false
	'8' <= 4// false


提示：只能用 === 运算来测试某个值是否是未定义的，因为 == 运算符认为 undefined 值等价于 null。

注释：null 表示无值，而 undefined 表示一个未声明的变量，或已声明但没有赋值的变量，或一个并不存在的对象属性。
*/
var myDog = {
"name":"BB",
"legs":4,
"tails":1,
"friends":["a","b"]


};

//JavaScript 使用正则表达式操作字符串
/*
Regular expressions 正则表达式被用来根据某种匹配模式来寻找strings中的某些单词。

例如：如果我们想要找到字符串The dog chased the cat中单词 the，
我们可以使用下面的正则表达式: 
/the/gi
-----------------------------------------
我们可以把这个正则表达式分成几段：

/ 是这个正则表达式的头部

the 是我们想要匹配的模式

/ 是这个正则表达式的尾部

g 代表着 global(全局)，意味着返回所有的匹配而不仅仅是第一个。

i 代表着忽略大小写，意思是当我们寻找匹配的字符串的时候忽略掉字母的大小写。
*/
二、jQuery
	在<script>元素里，添加 
	$(document).ready(function() {
		......
		......
	});

	function里面的代码会在浏览器加载页面后立即运行。

$("button") 选择所有 button
$(".well")  选择所有带well的 class

addClass()方法给元素加class

js发送post
function postCoversion(URL, PARAMS){
			var tmpiframe = document.createElement("iframe");
			tmpiframe.name = "frame1";
			tmpiframe.style="display:none";
			document.body.appendChild(tmpiframe);

		    var temp = document.createElement("form");
			temp.style.visibility="hidden"
		    temp.action = URL;
		    temp.method = "post";
			temp.onsubmit = "return false";
			temp.target = "frame1";
		    for (var x in PARAMS)
		    {
		        var opt = document.createElement("textarea");
		        opt.name = x;
		        opt.value = PARAMS[x];
		        temp.appendChild(opt);
		    }
		    document.body.appendChild(temp);
		    temp.submit();
			// document.body.removeChild(temp);
			// document.body.removeChild(tmpiframe);
		} 

var body ={"target":{
					"server_id":"1",
					"status":"server",
					"role_id":""
				},"cmd":{
					"time":new Date().getTime(),
					"serverid":loginData.sid,
					"userid":loginData.uid,
					"crltype":crltype,
					"pf":loginData.pf,
					"net":loginData.wanclient == "mini" ? "exe":"ie",
					"browser":getBrowser(),
					"os":getOS()
				},"track":{
					"oper":"100",
					"ts":"1411454706"
				}
	}
body 数据转json格式
	function getStr(crltype){
			var data = setBody(crltype);
			var str = "";
			var first = true;
			for (var key in data){
				if(first){
					str+="{\""+key+"\":{";
					first=false;
				}else{
					str+=",\""+key+"\":{";
				}
				var value= data[key];
				for(var valueKey in value){
					str+="\""+valueKey+"\":\""+value[valueKey]+"\",";
				}
				str = str.substring(0, str.lastIndexOf(','));
				str+="}";
			}
			str+="}";
			return str;
		}

function getOS() {  //判断所处操作系统
			var sUserAgent = navigator.userAgent.toLowerCase();  
			var isWin = (navigator.platform == "Win32") || (navigator.platform == "Win64")|| (navigator.platform == "wow64");   
			var isMac = (navigator.platform == "Mac68K") || (navigator.platform == "MacPPC") || (navigator.platform == "Macintosh") || (navigator.platform == "MacIntel");   
			if (isMac) return "OS X";   
			var isUnix = (navigator.platform == "X11") && !isWin && !isMac;   
			if (isUnix) return "Unix";   
			var isLinux = (String(navigator.platform).indexOf("Linux") > -1);   
			var bIsAndroid = sUserAgent.match(/android/i) == "android";  
			if (isLinux) {  
				if(bIsAndroid) return "Android";  
				else return "Linux";   
			}  
			if (isWin) {   
				var isWin2K = sUserAgent.indexOf("windows nt 5.0") > -1 || sUserAgent.indexOf("windows 2000") > -1;   
				if (isWin2K) return "Windows 2000";   
				var isWinXP = sUserAgent.indexOf("windows nt 5.1") > -1 || sUserAgent.indexOf("windows xp") > -1;
				if (isWinXP) return "Windows XP";   
				var isWin2003 = sUserAgent.indexOf("windows nt 5.2") > -1 || sUserAgent.indexOf("windows 2003") > -1;   
				if (isWin2003) return "Windows 2003";   
				var isWinVista= sUserAgent.indexOf("windows nt 6.0") > -1 || sUserAgent.indexOf("windows vista") > -1;   
				if (isWinVista) return "Windows Vista";   
				var isWin7 = sUserAgent.indexOf("windows nt 6.1") > -1 || sUserAgent.indexOf("windows 7") > -1;   
				if (isWin7) return "Windows 7";   
				var isWin8 = sUserAgent.indexOf("windows nt 6.2") > -1 || sUserAgent.indexOf("windows 8") > -1;  
				if (isWin8) return "Windows 8"; 
				var isWin10 = sUserAgent.indexOf("windows nt 10.0")>-1||sUserAgent.indexOf("windows 10")>-1;	
				if(isWin10)return "Windows 10";				
			}  
			return "Unknown";
		}
		function getBrowser(){
			var userAgent = navigator.userAgent; //取得浏览器的userAgent字符串
			var isOpera = userAgent.indexOf("Opera") > -1; //判断是否Opera浏览器
			var isIE = userAgent.indexOf("compatible") > -1
					&& userAgent.indexOf("MSIE") > -1 && !isOpera; //判断是否IE浏览器
			var isFF = userAgent.indexOf("Firefox") > -1; //判断是否Firefox浏览器
			var isSafari = userAgent.indexOf("Safari") > -1
					&& userAgent.indexOf("Chrome") == -1; //判断是否Safari浏览器
			var isChrome = userAgent.indexOf("Chrome") > -1
					&& userAgent.indexOf("Safari") > -1; //判断Chrome浏览器
			if (isFF) {
				return "Firefox";
			}
			if (isSafari) {
				return "Safari";
			}
			if (isChrome) {
				return "Chrome";
			}
			if (isIE) {
				var reIE = new RegExp("MSIE (\\d+\\.\\d+);");
				var result = reIE.test(userAgent);
				if(result){
					var fIEVersion = parseFloat(RegExp["$1"]);
					if (fIEVersion == 7) {
						return "IE 7.0";
					} else if (fIEVersion == 8) {
						return "IE 8.0";
					} else if (fIEVersion == 9) {
						return "IE 9.0";
					} else if (fIEVersion == 10) {
						return "IE 10.0";
					}
				}
			}else{
				 var result = /Trident\/7.0/i.test(userAgent);
				 if(result){
					var str = userAgent.match(/rv:([0-9]+\.[0-9]+)/i);
					if(str!=null){
						str = (""+str).split(':')[1].split(".")[0];
						if(str == "11")
							return "IE 11.0";
					}
				 }
			}
			return "Unknown";
		}
		function setCookie(key){
			var oDate=new Date();
			oDate.setTime(oDate.getTime()+60*60*24*1000*365);
			var expires = "expires="+oDate.toUTCString();
			document.cookie = loginData.sid + key + "=" + "1" + "; " + expires;
		}
		function isFindKey(key){
			key = "" + loginData.sid + key;
			var num = getCookie(key);
			if(num==key)return true;
			return false;
		}
		function getCookie(key){
			var attr1=document.cookie.split('; ');//空格不能取消
			for(var i=0;i<attr1.length;i++){
				var attr2=attr1[i].split('=');
				if(attr2[0]==key){
					return key;
				}
			}
		}